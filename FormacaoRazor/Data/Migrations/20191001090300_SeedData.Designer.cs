// <auto-generated />
using System;
using FormacaoRazor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FormacaoRazor.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191001090300_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FormacaoRazor.Areas.Identity.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FormacaoRazor.Areas.Identity.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FormacaoRazor.Areas.Identity.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("RoleId1");

                    b.Property<string>("UserId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("FormacaoRazor.Models.Common.Departamento", b =>
                {
                    b.Property<Guid>("DepartamentoId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("DepartamentoNome")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("DepartamentoNumero");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<Guid>("UhId");

                    b.HasKey("DepartamentoId");

                    b.HasIndex("UhId");

                    b.ToTable("Departamentos");

                    b.HasData(
                        new
                        {
                            DepartamentoId = new Guid("3d4b7e78-fe91-4fca-93ba-8492ab5a47e0"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            DepartamentoNome = "PMR'S",
                            DepartamentoNumero = 71680,
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            DepartamentoId = new Guid("f18e3fcd-adb3-4136-a31b-9f9cc9b93701"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            DepartamentoNome = "OPERAÇÕES",
                            DepartamentoNumero = 70001,
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        });
                });

            modelBuilder.Entity("FormacaoRazor.Models.Common.Funcao", b =>
                {
                    b.Property<Guid>("FuncaoId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("FuncaoNome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.HasKey("FuncaoId");

                    b.ToTable("Funcoes");

                    b.HasData(
                        new
                        {
                            FuncaoId = new Guid("c4e8e4a9-e6c0-4298-8c05-d88bfdc83b8c"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "COORDENADOR"
                        },
                        new
                        {
                            FuncaoId = new Guid("79238b38-4ea8-4d3d-9358-b28d13ab5008"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "ASSISTENTE ADMINISTRATIVA"
                        },
                        new
                        {
                            FuncaoId = new Guid("78c4e1bd-9b1b-4ff3-91d4-94e2139ff569"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "SUPERVISOR MYWAY"
                        },
                        new
                        {
                            FuncaoId = new Guid("a2e3aba8-4b04-41da-a585-5d48ae03c066"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "ALOCADOR MYWAY"
                        },
                        new
                        {
                            FuncaoId = new Guid("e8b0d9fc-65ac-4614-beed-7a62d983d8c8"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "ASSISTENTE PMR"
                        },
                        new
                        {
                            FuncaoId = new Guid("ee0cea92-ffd6-4168-8b17-8f2f3207b618"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "ASSISTENTE PMR PART-TIME"
                        },
                        new
                        {
                            FuncaoId = new Guid("d0e3ba3d-aa62-48a5-9050-786b00950479"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "MOTORISTA MYWAY"
                        },
                        new
                        {
                            FuncaoId = new Guid("5454ff34-6fd6-4ef6-b21f-ed52b2f20599"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "MOTORISTA AMBULIFT"
                        },
                        new
                        {
                            FuncaoId = new Guid("d27cf5ef-dd00-4500-acff-0d284b010400"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "PLANEAMENTO"
                        },
                        new
                        {
                            FuncaoId = new Guid("549936c3-26f2-45ff-971b-e1fa4d493e26"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "QUALIDADE"
                        },
                        new
                        {
                            FuncaoId = new Guid("fd00f2ea-8f25-4fff-be66-0cb0f5b7aeb7"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "COORDENAÇÃO OPS"
                        },
                        new
                        {
                            FuncaoId = new Guid("165c7875-bc22-4497-8314-74d45ad99bb3"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "LOAD CONTROL"
                        },
                        new
                        {
                            FuncaoId = new Guid("dd6d7f1a-dfa4-46d5-9735-7f30307de8bb"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "DISPATCHER"
                        },
                        new
                        {
                            FuncaoId = new Guid("b33efecd-cc02-42e4-ae45-23061d46901c"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "COORDENAÇÃO LOAD CONTROL"
                        },
                        new
                        {
                            FuncaoId = new Guid("7ac27970-8e3e-4ee3-8f07-33467953d9ab"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FuncaoNome = "ADMINISTRATIVO OPS"
                        });
                });

            modelBuilder.Entity("FormacaoRazor.Models.Common.Sala", b =>
                {
                    b.Property<Guid>("SalaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacidade");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<string>("SalaNome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("UhId");

                    b.HasKey("SalaID");

                    b.HasIndex("UhId");

                    b.ToTable("Salas");

                    b.HasData(
                        new
                        {
                            SalaID = new Guid("463db092-7c78-4509-83fe-76e62baf677c"),
                            Capacidade = 22,
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            SalaNome = "SALA 1 - EDIFÍCIO 124",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            SalaID = new Guid("7fd4ba6e-267b-4a42-89bc-722c9d6003a9"),
                            Capacidade = 15,
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            SalaNome = "SALA 2 - EDIFÍCIO 124, 2�PISO",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            SalaID = new Guid("aae68aa3-1af8-4504-a1c2-706fabbed357"),
                            Capacidade = 10,
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            SalaNome = "SALA 3 - EDIFÍCIO 124, PC'S",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            SalaID = new Guid("7c5593fc-d0ef-494f-b2c6-0f4ccf471a6f"),
                            Capacidade = 22,
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            SalaNome = "SALA NOVA 10",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        });
                });

            modelBuilder.Entity("FormacaoRazor.Models.Common.Uh", b =>
                {
                    b.Property<Guid>("UhId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<string>("UhNome")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("UhId");

                    b.ToTable("Uhs");

                    b.HasData(
                        new
                        {
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            IATA = "LIS",
                            UhNome = "LISBOA"
                        },
                        new
                        {
                            UhId = new Guid("57f7b1cc-c94f-4b19-871f-ee5d2e4184af"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            IATA = "OPO",
                            UhNome = "PORTO"
                        },
                        new
                        {
                            UhId = new Guid("b8040251-73a1-4dbd-8af3-5526ace9f710"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            IATA = "FAO",
                            UhNome = "FARO"
                        },
                        new
                        {
                            UhId = new Guid("660d1f5e-475b-482f-b140-c8c825e971ad"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            IATA = "FNC",
                            UhNome = "FUNCHAL"
                        });
                });

            modelBuilder.Entity("FormacaoRazor.Models.Formacao", b =>
                {
                    b.Property<Guid>("FormacaoId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("FormacaoCod")
                        .IsRequired();

                    b.Property<string>("FormacaoColor")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("#000000");

                    b.Property<string>("FormacaoNome")
                        .IsRequired();

                    b.Property<int>("FormacaoValidade");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.HasKey("FormacaoId");

                    b.HasIndex("FormacaoCod")
                        .IsUnique()
                        .HasName("AlternateKey_Cod");

                    b.HasIndex("FormacaoNome")
                        .IsUnique()
                        .HasName("AlternateKey_Nome");

                    b.ToTable("Formacoes");
                });

            modelBuilder.Entity("FormacaoRazor.Models.Formacoes.FormacaoColaborador", b =>
                {
                    b.Property<Guid>("FormacaoColaboradorId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ColaboradorId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("FormacaoCaducidade");

                    b.Property<DateTime>("FormacaoData");

                    b.Property<Guid>("FormacaoId");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.HasKey("FormacaoColaboradorId");

                    b.HasIndex("ColaboradorId");

                    b.HasIndex("FormacaoId");

                    b.ToTable("FormacoesColaboradores");
                });

            modelBuilder.Entity("FormacaoRazor.Models.Formacoes.HistoricoFormacaoColaborador", b =>
                {
                    b.Property<Guid>("HistoricoFormacaoColaboradorId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ColaboradorId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("FormacaoCaducidade");

                    b.Property<DateTime>("FormacaoData");

                    b.Property<Guid>("FormacaoId");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.HasKey("HistoricoFormacaoColaboradorId");

                    b.HasIndex("ColaboradorId");

                    b.HasIndex("FormacaoId");

                    b.ToTable("HistoricoFormacoesColaboradores");
                });

            modelBuilder.Entity("FormacaoRazor.Models.FormacoesFormador", b =>
                {
                    b.Property<Guid>("FormacoesFormadorId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid>("FormacaoId");

                    b.Property<Guid>("FormadorId");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.HasKey("FormacoesFormadorId");

                    b.HasIndex("FormacaoId");

                    b.HasIndex("FormadorId");

                    b.ToTable("FormacoesFormadores");
                });

            modelBuilder.Entity("FormacaoRazor.Models.Formador", b =>
                {
                    b.Property<Guid>("FormadorID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<string>("FormadorNome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<Guid>("UhId");

                    b.HasKey("FormadorID");

                    b.HasIndex("UhId");

                    b.ToTable("Formadores");

                    b.HasData(
                        new
                        {
                            FormadorID = new Guid("18072b41-1652-4b1c-bf17-22785670bdaa"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FormadorNome = "RUI PEREIRA",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            FormadorID = new Guid("8b67f507-daff-4d56-92b3-f4fa61d69926"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FormadorNome = "MÁRIO ANTÓNIO",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            FormadorID = new Guid("3dccb2aa-00c0-4309-b5fe-7eceb47c4c98"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FormadorNome = "JOÃO DOMINGUES",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            FormadorID = new Guid("9f15f2b6-27c7-4731-ab28-9761ced3539d"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FormadorNome = "ARTUR AFONSO",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            FormadorID = new Guid("c7f578db-468e-4707-9aaa-4eff8e1acb61"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FormadorNome = "RAQUEL LEITÃO",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            FormadorID = new Guid("bcd988f0-3373-4921-9a1d-dde8a607a165"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FormadorNome = "IURI ISIDORO",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            FormadorID = new Guid("b0d74e71-bdc8-4a7b-9ed6-f4c592b16b5c"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FormadorNome = "VITOR LANDIM",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            FormadorID = new Guid("ba6e4f7a-5f4f-499e-9c28-4646414443b2"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FormadorNome = "HELENA LEITÃO",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        },
                        new
                        {
                            FormadorID = new Guid("9ebf511c-0cd7-4f85-b9bc-0c3678cd15b4"),
                            CreatedAt = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "SISTEMA",
                            FormadorNome = "FILIPE MARQUES",
                            UhId = new Guid("04fde6b2-fd97-4856-9640-b9e1abc73140")
                        });
                });

            modelBuilder.Entity("FormacaoRazor.Models.Formandos.Colaborador", b =>
                {
                    b.Property<Guid>("ColaboradorID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Ativo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<Guid>("DepartamentoId");

                    b.Property<Guid>("FuncaoId");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int>("NumCartao");

                    b.Property<int>("NumPw");

                    b.Property<Guid>("UhId");

                    b.HasKey("ColaboradorID");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("FuncaoId");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasName("AlternateKey_Nome");

                    b.HasIndex("UhId");

                    b.ToTable("Colaboradores");
                });

            modelBuilder.Entity("FormacaoRazor.Models.Marcacoes.Calendario", b =>
                {
                    b.Property<int>("DateKey");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<byte>("Day");

                    b.Property<short>("DayOfYear");

                    b.Property<string>("DaySuffix")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<byte>("DowinMonth")
                        .HasColumnName("DOWInMonth");

                    b.Property<DateTime>("FirstDayOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfNextMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfNextYear")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfQuarter")
                        .HasColumnType("date");

                    b.Property<DateTime>("FirstDayOfYear")
                        .HasColumnType("date");

                    b.Property<string>("HolidayText")
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<bool>("IsHoliday");

                    b.Property<bool>("IsWeekend");

                    b.Property<byte>("IsoweekOfYear")
                        .HasColumnName("ISOWeekOfYear");

                    b.Property<DateTime>("LastDayOfMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastDayOfQuarter")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastDayOfYear")
                        .HasColumnType("date");

                    b.Property<string>("Mmyyyy")
                        .IsRequired()
                        .HasColumnName("MMYYYY")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<byte>("Month");

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("MonthYear")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<byte>("Quarter");

                    b.Property<string>("QuarterName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("WeekDayName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte>("WeekOfMonth");

                    b.Property<byte>("WeekOfYear");

                    b.Property<byte>("Weekday");

                    b.Property<int>("Year");

                    b.HasKey("DateKey");

                    b.ToTable("Calendarios");
                });

            modelBuilder.Entity("FormacaoRazor.Models.Marcacoes.Marcacao", b =>
                {
                    b.Property<Guid>("MarcacaoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColorCode");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("DataFim");

                    b.Property<DateTime>("DataInicio");

                    b.Property<Guid>("FormacaoId");

                    b.Property<Guid>("FormadorID");

                    b.Property<DateTime?>("LastUpdatedAt");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<Guid>("SalaId");

                    b.Property<Guid>("UhId");

                    b.HasKey("MarcacaoID");

                    b.HasIndex("FormacaoId");

                    b.HasIndex("FormadorID");

                    b.HasIndex("SalaId");

                    b.HasIndex("UhId");

                    b.ToTable("Marcacoes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FormacaoRazor.Areas.Identity.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("FormacaoRazor.Areas.Identity.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FormacaoRazor.Areas.Identity.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("FormacaoRazor.Areas.Identity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FormacaoRazor.Areas.Identity.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("FormacaoRazor.Models.Common.Departamento", b =>
                {
                    b.HasOne("FormacaoRazor.Models.Common.Uh", "Uh")
                        .WithMany("Departamentos")
                        .HasForeignKey("UhId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormacaoRazor.Models.Common.Sala", b =>
                {
                    b.HasOne("FormacaoRazor.Models.Common.Uh", "Uh")
                        .WithMany("Salas")
                        .HasForeignKey("UhId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormacaoRazor.Models.Formacoes.FormacaoColaborador", b =>
                {
                    b.HasOne("FormacaoRazor.Models.Formandos.Colaborador", "Colaborador")
                        .WithMany("FormacoesColaborador")
                        .HasForeignKey("ColaboradorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FormacaoRazor.Models.Formacao", "Formacao")
                        .WithMany("FormacoesColaborador")
                        .HasForeignKey("FormacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FormacaoRazor.Models.Formacoes.HistoricoFormacaoColaborador", b =>
                {
                    b.HasOne("FormacaoRazor.Models.Formandos.Colaborador", "Colaborador")
                        .WithMany("HistoricoFormacoesColaborador")
                        .HasForeignKey("ColaboradorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FormacaoRazor.Models.Formacao", "Formacao")
                        .WithMany("HistoricoFormacoesColaborador")
                        .HasForeignKey("FormacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FormacaoRazor.Models.FormacoesFormador", b =>
                {
                    b.HasOne("FormacaoRazor.Models.Formacao", "Formacao")
                        .WithMany("FormacoesFormadores")
                        .HasForeignKey("FormacaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FormacaoRazor.Models.Formador", "Formador")
                        .WithMany("FormacoesFormadores")
                        .HasForeignKey("FormadorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FormacaoRazor.Models.Formador", b =>
                {
                    b.HasOne("FormacaoRazor.Models.Common.Uh", "Uh")
                        .WithMany("Formadores")
                        .HasForeignKey("UhId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormacaoRazor.Models.Formandos.Colaborador", b =>
                {
                    b.HasOne("FormacaoRazor.Models.Common.Departamento", "Departamento")
                        .WithMany("Colaboradores")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormacaoRazor.Models.Common.Funcao", "Funcao")
                        .WithMany("Colaboradores")
                        .HasForeignKey("FuncaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FormacaoRazor.Models.Common.Uh", "Uh")
                        .WithMany("Colaboradores")
                        .HasForeignKey("UhId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("FormacaoRazor.Models.Marcacoes.Marcacao", b =>
                {
                    b.HasOne("FormacaoRazor.Models.Formacao", "Formacao")
                        .WithMany("Marcacoes")
                        .HasForeignKey("FormacaoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormacaoRazor.Models.Formador", "Formador")
                        .WithMany("Marcacoes")
                        .HasForeignKey("FormadorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormacaoRazor.Models.Common.Sala", "Sala")
                        .WithMany("Marcacoes")
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FormacaoRazor.Models.Common.Uh", "Uh")
                        .WithMany("Marcacoes")
                        .HasForeignKey("UhId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FormacaoRazor.Areas.Identity.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FormacaoRazor.Areas.Identity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FormacaoRazor.Areas.Identity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FormacaoRazor.Areas.Identity.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
